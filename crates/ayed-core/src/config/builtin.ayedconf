# Features I think could be useful/necessary:
# - "Scripts" as sequence of commands.
#       Usable in place of commands in keybinds, hooks, etc.
#       Async "scripts"?
# - ...?

# Essential for input mapping
hooks {
    input map-input
}


# Essential for general editing
hooks {
    selections-modified $[ selections-merge-overlapping ; look-keep-primary-cursor-in-view ]
}


# Essential for undo/redo
hooks {
    buffer-opened history-save
}

mode normal {
    hooks {
        buffer-modified history-save
        selections-modified history-save
        state-modified:mode history-save
    }
}


# Essential for suggestions
suggestions {
    placement cursor
    source active-buffer
}
mode insert.* {
    hooks {
        selections-modified suggestions-gather
        state-before-modified:mode suggestions-clear
    }
}
@override
panel modeline {
    suggestions {
        placement modeline
        source commands
    }
}
panel modeline {
    hooks {
        suggestions-select move r anchored
    }
}


# Default config

mixin basic-movement {
    # FIXME those map-input's are dirty. Allow defining reusable commands in config!
    keybinds {
        <up> move u
        <s-up> move u anchored
        <c-up> $[ map-input x ; selections-flip --backward ; move u ; map-input x ; selections-flip --backward ]
        <cs-up> $[ map-input x ; selections-flip --backward ; move u anchored ; map-input x ; selections-flip --backward ]

        <down> move d
        <s-down> move d anchored
        <c-down> $[ map-input x ; move d ; map-input x ]
        <cs-down> $[ map-input x ; move d anchored; map-input x ]

        <left> move l
        <s-left> move l anchored
        <c-left> move-regex --reversed \w+\b|[^\s\w]+
        <cs-left> move-regex --reversed --anchored \w+\b|[^\s\w]+

        <right> move r
        <s-right> move r anchored
        <c-right> move-regex \w+\b|[^\s\w]+
        <cs-right> move-regex --anchored \w+\b|[^\s\w]+

        <home> move-to-edge --reanchored line-start
        <s-home> move-to-edge --anchored line-start

        <end> move-to-edge --reanchored line-past-end
        <s-end> move-to-edge --anchored line-past-end

        <sa-up> look u
        <sa-down> look d
        <sa-left> look l
        <sa-right> look r
    }
}

mixin basic-deletion {
    keybinds {
        <del> delete -c
        <backspace> delete-around -c -p
        <a-backspace> delete-around
    }
}

mixin suggestions {
    keybinds {
        <a-down> suggestions-select --next
        <c-n> suggestions-select --next

        <a-up> suggestions-select --previous
        <c-p> suggestions-select --previous
    }
}

@override
panel modeline {
    use basic-movement
    use basic-deletion
    use suggestions

    keybinds {
        <esc> panel-focus editor
        <ret> modeline-exec

        <up> modeline-history --previous
        <down> modeline-history --next

        else insert-char
    }
}

@override
panel warpdrive {
    keybinds {
        <esc> panel-focus editor
        else warpdrive-input
    }
}


########################
### Editing keybinds ###

hooks {
    started set mode normal
}

mode normal {
    use basic-movement
    use suggestions

    keybinds {
        <del> delete -c
        <a-backspace> delete-around

        k move u
        K move u anchored
        <c-k> $[ map-input x ; selections-flip --backward ; move u ; map-input x ; selections-flip --backward ]
        <c-K> message <cs-letter> just dont work in terminal :(

        j move d
        J move d anchored
        <c-j> $[ map-input x ; move d ; map-input x ]

        h move l
        H move l anchored
        <c-h> move-regex --reversed \w+|[^\s\w]+
        l move r
        L move r anchored
        <c-l> move-regex \w+|[^\s\w]+

        e move-regex \s*\w+\b|\s*[^\s\w]+
        <s-e> move-regex --anchored \s*\w+\b|\s*[^\s\w]+
        w move-regex \w+\b\s*|[^\s\w]+\s*
        <s-w> move-regex --anchored \w+\b\s*|[^\s\w]+\s*
        b move-regex --reversed \w+\b\s*|[^\s\w]+\s*
        <s-b> move-regex --reversed --anchored \w+\b\s*|[^\s\w]+\s*

        C selections-duplicate --down
        <a-C> selections-duplicate --up
        ; selection-shrink
        <a-;> selections-flip
        , selections-dismiss-extras

        ) selections-rotate
        ( selections-rotate --reversed

        o $[ set mode insert ; selections-flip --forward ; move-to-edge line-past-end ; insert-char \n ]
        <s-o> $[ set mode insert ; move-to-edge line-start ; insert-char \n ; move u ]

        x $[ selections-flip --backward ; map-input <s-home> ; selections-flip --forward ; map-input <s-end> ]

        c $[ set mode insert ; yank ; delete ]

        d $[ yank ; delete ]

        u history-undo

        % $[ move-to-edge buffer-start ; move-to-edge --anchored buffer-end ]

        y yank
        p paste
        <s-p> paste --before

        : panel-focus modeline

        <backtab> set mode insert
        i set mode insert
        <s-i> $[ map-input <home> ; set mode insert ]

        a set mode insert-append

        <space> set mode combo-user
        g set mode combo-goto

        q warpdrive
    }
}

mixin mode-insert-append-common {
    use basic-movement
    use basic-deletion
    use suggestions

    keybinds {
        <c-space> set mode normal
        <esc> set mode normal
        else insert-char
    }
}

mode insert {
    use mode-insert-append-common

    hooks {
        state-modified:mode selections-flip --backward
    }
}

mode insert-append {
    use mode-insert-append-common

    hooks {
        state-modified:mode $[ selections-flip --forward ; move r anchored ]
        state-before-modified:mode move l anchored
    }
}


###########################
### General convenience ###

hooks {
    buffer-modified look-keep-primary-cursor-in-view
    resized look-keep-primary-cursor-in-view
}


########################
### Syntax highlight ###

hooks {
    buffer-opened  generate-highlights
    buffer-modified  generate-highlights
}

syntax-style {
    keyword             #4488cf
    keyword-statement   #aa77cc
    builtin             $[ #62b0fb ; priority:11 ]
    operator            #ddccdd
    delimiter           $[ #ccaa11 ; priority:11 ]
    macro               $[ #3377cc ; priority:11 ]
    type                $[ #55b89b ; priority:12 ]
    literal             $[ #aaddcc ; priority:11 ]
    string              $[ #bb8866 ; priority:14 ]
    function            $[ #b8a4fc ; priority:13 ]
    namespace           #55b89b
    comment             $[ #55887a ; priority:15 ]
}

file .*\.rs {
    syntax {
        keyword \b(let|impl|pub|fn|mod|use|as|self|Self|mut|unsafe|move|struct|enum|type)\b
        keyword-statement \b(if|else|while|for|in|loop|continue|break|match)\b
        builtin \b(Some|None|Ok|Err)\b
        operator (==|=|!=|\+|\+=|\-|\-=|\*|\*=|/|/=|!|\|\||&&|\||&|::|:|;|,|\.\.|\.|\?)
        delimiter (->|=>|\{|\}|\[|\]|\(|\)|<|>)
        macro \b([a-zA-Z0-9_]+\!)
        type $[ \b([A-Z][a-zA-Z0-9_]*)\b ; \b((u|i)(8|16|32|64|128)|f32|f64)\b ; \b(char)\b ]
        literal $[ (([0-9]*\.[0-9]+|[0-9]+\.|[0-9]+)((u|i)(8|16|32|64|128)|f32|f64)?) ; \b(true|false)\b ]
        string $[ (r?\"[^\"]*\") ; (r?'[^']*') ]
        function \b([a-z0-9_][a-zA-Z0-9_]*)\(
        namespace \b([a-zA-Z0-9_]+)::
        comment (//.*)$
    }
}



#############
### Combo ###

mode combo-user {
    keybinds {
        f set mode combo-file
    }
    keybinds-doc {
        f File management
    }
}

mode combo-file {
    keybinds {
        s buffer-write
    }
    keybinds-doc {
        s Save file
    }
}

mode combo-goto {
    keybinds {
        g move-to-edge buffer-start
        G move-to-edge --anchored buffer-start
        e move-to-edge buffer-end
        E move-to-edge --anchored buffer-end
    }
    keybinds-doc {
        g Buffer start
        G Buffer start (anchored)
        e Buffer end
        E Buffer end (anchored)
    }
}
